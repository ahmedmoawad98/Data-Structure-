////Ahmed Moawad 


package SpotifySong;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;
//import SpotifySong.LinkedList.Node;

public class DoubleLinkedList {
	
		StringNode root;
		int size;
    /*******************************************************/
	private class StringNode {
		private StringNode Next;
		private StringNode Previous;
		private String Artist;
		private int Count; 
		

		// 0-arg constructor, 1-arg constructor, 2-arg constructor
		private StringNode() {
			Artist = null;
			Next = null;
			Previous = null;
			Count = 0; 
		}
		
		private StringNode(String val) {
			Artist = val;
			Next = null;
			Previous = null;
			Count=0;
		}
		
		private StringNode(String val, StringNode next, StringNode prev) {
			Artist = val;
			Next = next;
			Previous = prev;
			Count = 1;
		}
		
		private String getData() {
			return this.Artist;
		}
		
	}
	/*******************************************************/
	public DoubleLinkedList () {
		root= null; 
		size= 0; 
	}
	public void setSize(int s) {
		this.size = s;
	}
	
	public int getSize() {
		return this.size;
	}
	/*******************************************************/
	public void testMe() {
		Random rand = new Random();
		
		for (int i = 0; i<100; i++) {
			int	r = rand.nextInt(26) + 65;
			String letter = Character.toString((char) r);
			this.add(letter);
			System.out.println(letter);
		}
		System.out.println("========");
		this.printLinkedList("C");
	}
	/*******************************************************/
	
	public void LoadSortArtist() {
		String csvFile = "C:\\Temp\\Data\\regional-global-weekly-2020-01-17--2020-01-24.csv";
		int SkipLines = 2;
		String csvSplitBy= ",";
		BufferedReader br = null;
		String line = "";
		int lineCount=0;
		
		try {
			br = new BufferedReader( new FileReader(csvFile)); 
			while(( line = br.readLine()) !=null) { 
				lineCount++; 
				if(lineCount > SkipLines) {
					String[] SpotifySongs = line.split(csvSplitBy); 
					String str = SpotifySongs[2];
					while (str.startsWith("\"") ) {
						str = str.substring(1, str.length()-1);  // remove first and last chracter
					}
					
					this.add(str.toUpperCase().trim());
				}
			}		
		}
		catch (FileNotFoundException e ) {
			e.printStackTrace();
		}
		catch (IOException e) {
			e.printStackTrace();
		}
		finally {
			if (br !=null) {
				try {
					br.close();
				}catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
			
}
		
	
	/*******************************************************/
	public void printLinkedList(String target) {
		
		StringNode ptr = root;
		if (target == "C") {
			while(ptr != null) {
				System.out.println(ptr.getData() + " - " + ptr.Count );
				ptr= ptr.Next;
			}
		}else {
			// code to write output to a text file
			 BufferedWriter output = null;
		 	try { 
		 		File file = new File("C:\\Temp\\Data\\Spotfiy-Artists-List2.csv");
		 		output = new BufferedWriter(new FileWriter(file));
		 		output.write("Artist,Count");
		 		output.newLine();
		 		while(ptr != null) {
		 			output.write(ptr.getData());
		 			output.write(",");
		 			output.write(String.valueOf(ptr.Count));
					output.newLine();
					ptr= ptr.Next;
					
				}
		 	}
		 	catch (IOException e) {
		 		e.printStackTrace();			 		
		 	}
		 	finally { 
		 		if ( output != null) {
		 			try {
		 				output.close(); ;
					} 
		 			catch (IOException e) {
						e.printStackTrace();
					}
		 		}
		 	}
		
		}
	}

	
	/*******************************************************/
	public StringNode add(String data) {
		StringNode newNode = new StringNode(data, null, null);
		
		if(this.root == null) {
			this.root = newNode;
		}
		else {
			    StringNode currNode = this.root;
			    
			    while (currNode != null) {
			    	int result = currNode.getData().compareTo(data);
			    	if (result == 0) {
			    		currNode.Count ++;	
			    		this.size --;
			    		break;
			    	}
			    	// current node value is greater than new node value
				    // insert new node before current node
			    	else if (result > 0 ) {

					   if (this.root == currNode) {
						   newNode.Next = currNode;
						   newNode.Previous = null;
						   currNode.Previous = newNode;
						   this.root = newNode;
						   break;						
					   }	
					   else {
						   newNode.Next = currNode;
						   newNode.Previous = currNode.Previous;						   
						   currNode.Previous.Next = newNode;					   
						   currNode.Previous = newNode;
						   break;
					   }
					}
					// current node value is less than new node value
					// insert new node after current node
					else{
						if (currNode.Next == null) {
							newNode.Next = null;
							newNode.Previous = currNode;
							currNode.Next = newNode; 
							break;
						}
						else
							currNode = currNode.Next;

					}
			    }
			}					
		this.size++;
		return newNode;
	}
	
	/******************************************************/
	public static void main( String[] args) { 
		DoubleLinkedList DLL = new DoubleLinkedList();
		//DLL.testMe();
		DLL.LoadSortArtist();
		DLL.printLinkedList("");

	}

		
		
		
	}


